TITLE Mod file for component: Component(id=rampCell0 type=vClampedRampCell)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.8.1
         org.neuroml.model   v1.8.1
         jLEMS               v0.10.6

ENDCOMMENT

NEURON {
    POINT_PROCESS rampCell0
    
    
    NONSPECIFIC_CURRENT i                    : To ensure v of section follows v_I
    RANGE delay                             : parameter
    RANGE duration                          : parameter
    RANGE baseVoltage                       : parameter
    RANGE targetVoltage0                    : parameter
    RANGE targetVoltage1                    : parameter
    RANGE caConc                            : parameter
    RANGE test_number                       : parameter
    RANGE test_erev                         : parameter
    RANGE test_vShift                       : parameter
    
    RANGE test_i                            : exposure
    RANGE test_kfast_conductance            : parameter
    
    RANGE test_kfast_g                      : exposure
    
    RANGE test_kfast_fopen                  : exposure
    RANGE test_kfast_q10ConductanceScaling_q10Factor: parameter
    RANGE test_kfast_q10ConductanceScaling_experimentalTemp: parameter
    RANGE test_kfast_q10ConductanceScaling_TENDEGREES: parameter
    
    RANGE test_kfast_q10ConductanceScaling_factor : exposure
    RANGE test_kfast_n_instances            : parameter
    
    RANGE test_kfast_n_alpha                : exposure
    
    RANGE test_kfast_n_beta                 : exposure
    
    RANGE test_kfast_n_tau                  : exposure
    
    RANGE test_kfast_n_inf                  : exposure
    
    RANGE test_kfast_n_rateScale            : exposure
    
    RANGE test_kfast_n_fcond                : exposure
    RANGE test_kfast_n_forwardRate_rate     : parameter
    RANGE test_kfast_n_forwardRate_midpoint : parameter
    RANGE test_kfast_n_forwardRate_scale    : parameter
    
    RANGE test_kfast_n_forwardRate_r        : exposure
    RANGE test_kfast_n_reverseRate_rate     : parameter
    RANGE test_kfast_n_reverseRate_midpoint : parameter
    RANGE test_kfast_n_reverseRate_scale    : parameter
    
    RANGE test_kfast_n_reverseRate_r        : exposure
    RANGE test_kfast_n_q10Settings_q10Factor: parameter
    RANGE test_kfast_n_q10Settings_experimentalTemp: parameter
    RANGE test_kfast_n_q10Settings_TENDEGREES: parameter
    
    RANGE test_kfast_n_q10Settings_q10      : exposure
    
    RANGE copy_v                           : copy of v on section
    RANGE test_kfast_n_forwardRate_x        : derived variable
    RANGE test_kfast_n_reverseRate_x        : derived variable
    RANGE test_kfast_conductanceScale       : derived variable
    RANGE test_kfast_fopen0                 : derived variable
    RANGE test_channelg                     : derived variable
    RANGE test_geff                         : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    delay = 0 (ms)
    duration = 200 (ms)
    baseVoltage = -100 (mV)
    targetVoltage0 = -100 (mV)
    targetVoltage1 = 300 (mV)
    caConc = 5.0E-5 (mM)
    test_number = 1 
    test_erev = 0 (mV)
    test_vShift = 0 (mV)
    test_kfast_conductance = 1.0E-5 (uS)
    test_kfast_q10ConductanceScaling_q10Factor = 2.3 
    test_kfast_q10ConductanceScaling_experimentalTemp = 296.15 (K)
    test_kfast_q10ConductanceScaling_TENDEGREES = 10 (K)
    test_kfast_n_instances = 1 
    test_kfast_n_forwardRate_rate = 0.18 (kHz)
    test_kfast_n_forwardRate_midpoint = 25 (mV)
    test_kfast_n_forwardRate_scale = 9 (mV)
    test_kfast_n_reverseRate_rate = 0.018000001 (kHz)
    test_kfast_n_reverseRate_midpoint = 25 (mV)
    test_kfast_n_reverseRate_scale = -9 (mV)
    test_kfast_n_q10Settings_q10Factor = 2.3 
    test_kfast_n_q10Settings_experimentalTemp = 296.15 (K)
    test_kfast_n_q10Settings_TENDEGREES = 10 (K)
}

ASSIGNED {
    v (mV)
    i (mA/cm2)
    
    copy_v (mV)
    
    v_I (nA) 
    
    test_kfast_q10ConductanceScaling_factor : derived variable
    
    test_kfast_n_forwardRate_x             : derived variable
    
    test_kfast_n_forwardRate_r (kHz)       : conditional derived var...
    
    test_kfast_n_reverseRate_x             : derived variable
    
    test_kfast_n_reverseRate_r (kHz)       : conditional derived var...
    
    test_kfast_n_q10Settings_q10           : derived variable
    
    test_kfast_n_rateScale                 : derived variable
    
    test_kfast_n_alpha (kHz)               : derived variable
    
    test_kfast_n_beta (kHz)                : derived variable
    
    test_kfast_n_fcond                     : derived variable
    
    test_kfast_n_inf                       : derived variable
    
    test_kfast_n_tau (ms)                  : derived variable
    
    test_kfast_conductanceScale            : derived variable
    
    test_kfast_fopen0                      : derived variable
    
    test_kfast_fopen                       : derived variable
    
    test_kfast_g (uS)                      : derived variable
    
    test_channelg (uS)                     : derived variable
    
    test_geff (uS)                         : derived variable
    
    test_i (nA)                            : derived variable
    rate_test_kfast_n_q (/ms)
    
}

STATE {
    test_kfast_n_q  
    
}

INITIAL {
    rates()
    rates() ? To ensure correct initialisation.
    
    net_send(0, 1) : go to NET_RECEIVE block, flag 1, for initial state
    
    test_kfast_n_q = test_kfast_n_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=kfast type=ionChannelHH), from conductanceScaling; Component(id=null type=q10ConductanceScaling)
    ? multiply applied to all instances of factor in: <conductanceScaling> ([Component(id=null type=q10ConductanceScaling)]))
    test_kfast_conductanceScale = test_kfast_q10ConductanceScaling_factor ? path based, prefix = test_kfast_
    
    ? DerivedVariable is based on path: gates[*]/fcond, on: Component(id=kfast type=ionChannelHH), from gates; Component(id=n type=gateHHrates)
    ? multiply applied to all instances of fcond in: <gates> ([Component(id=n type=gateHHrates)]))
    test_kfast_fopen0 = test_kfast_n_fcond ? path based, prefix = test_kfast_
    
    test_kfast_fopen = test_kfast_conductanceScale  *  test_kfast_fopen0 ? evaluable
    test_kfast_g = test_kfast_conductance  *  test_kfast_fopen ? evaluable
    
    copy_v = v
    i = v_I
}

NET_RECEIVE(flag) {
    
    if (flag == 1) { : Setting watch for top level OnCondition...
        WATCH (t >=  delay  && t <=   duration  +  delay) 1000
    }
    if (flag == 1000) {
    
        v = targetVoltage0  + (  targetVoltage1  -  targetVoltage0  )*(t-  delay  )/(  duration  )
    
        v_I = 0 : Setting rate of change of v to 0
    }
    
    if (flag == 1) { : Setting watch for top level OnCondition...
        WATCH (t >   duration  +  delay) 1001
    }
    if (flag == 1001) {
    
        v = baseVoltage
    
        v_I = 0 : Setting rate of change of v to 0
    }
    if (flag == 1) { : Set initial states
    
        v = baseVoltage
    }
    
}

DERIVATIVE states {
    rates()
    test_kfast_n_q' = rate_test_kfast_n_q 
    
}

PROCEDURE rates() {
    
    test_kfast_q10ConductanceScaling_factor = test_kfast_q10ConductanceScaling_q10Factor ^((temperature -  test_kfast_q10ConductanceScaling_experimentalTemp )/ test_kfast_q10ConductanceScaling_TENDEGREES ) ? evaluable
    test_kfast_n_forwardRate_x = (v -  test_kfast_n_forwardRate_midpoint ) /  test_kfast_n_forwardRate_scale ? evaluable
    if (test_kfast_n_forwardRate_x  != 0)  { 
        test_kfast_n_forwardRate_r = test_kfast_n_forwardRate_rate  *  test_kfast_n_forwardRate_x  / (1 - exp(0 -  test_kfast_n_forwardRate_x )) ? evaluable cdv
    } else if (test_kfast_n_forwardRate_x  == 0)  { 
        test_kfast_n_forwardRate_r = test_kfast_n_forwardRate_rate ? evaluable cdv
    }
    
    test_kfast_n_reverseRate_x = (v -  test_kfast_n_reverseRate_midpoint ) /  test_kfast_n_reverseRate_scale ? evaluable
    if (test_kfast_n_reverseRate_x  != 0)  { 
        test_kfast_n_reverseRate_r = test_kfast_n_reverseRate_rate  *  test_kfast_n_reverseRate_x  / (1 - exp(0 -  test_kfast_n_reverseRate_x )) ? evaluable cdv
    } else if (test_kfast_n_reverseRate_x  == 0)  { 
        test_kfast_n_reverseRate_r = test_kfast_n_reverseRate_rate ? evaluable cdv
    }
    
    test_kfast_n_q10Settings_q10 = test_kfast_n_q10Settings_q10Factor ^((temperature -  test_kfast_n_q10Settings_experimentalTemp )/ test_kfast_n_q10Settings_TENDEGREES ) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=n type=gateHHrates), from q10Settings; Component(id=null type=q10ExpTemp)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10ExpTemp)]))
    test_kfast_n_rateScale = test_kfast_n_q10Settings_q10 ? path based, prefix = test_kfast_n_
    
    ? DerivedVariable is based on path: forwardRate/r, on: Component(id=n type=gateHHrates), from forwardRate; Component(id=null type=HHExpLinearRate)
    test_kfast_n_alpha = test_kfast_n_forwardRate_r ? path based, prefix = test_kfast_n_
    
    ? DerivedVariable is based on path: reverseRate/r, on: Component(id=n type=gateHHrates), from reverseRate; Component(id=null type=HHExpLinearRate)
    test_kfast_n_beta = test_kfast_n_reverseRate_r ? path based, prefix = test_kfast_n_
    
    test_kfast_n_fcond = test_kfast_n_q ^ test_kfast_n_instances ? evaluable
    test_kfast_n_inf = test_kfast_n_alpha /( test_kfast_n_alpha + test_kfast_n_beta ) ? evaluable
    test_kfast_n_tau = 1/(( test_kfast_n_alpha + test_kfast_n_beta ) *  test_kfast_n_rateScale ) ? evaluable
    ? DerivedVariable is based on path: ionChannel/g, on: Component(id=test type=channelPopulation), from ionChannel; Component(id=kfast type=ionChannelHH)
    test_channelg = test_kfast_g ? path based, prefix = test_
    
    test_geff = test_channelg  *  test_number ? evaluable
    test_i = test_geff  * ( test_erev  - v) ? evaluable
    
     
    
     
    
     
    
     
    rate_test_kfast_n_q = ( test_kfast_n_inf  -  test_kfast_n_q ) /  test_kfast_n_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    
}

